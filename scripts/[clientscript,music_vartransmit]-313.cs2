// 313 clientscript
fun music_vartransmit(component0: Component, component1: Component, count2: Int) {

	flags0[calc(21 + 1)]: Int
	flags0[1] = VARP[20]
	flags0[2] = VARP[21]
	flags0[3] = VARP[22]
	flags0[4] = VARP[23]
	flags0[5] = VARP[24]
	flags0[6] = VARP[25]
	flags0[7] = VARP[298]
	flags0[8] = VARP[311]
	flags0[9] = VARP[346]
	flags0[10] = VARP[414]
	flags0[11] = VARP[464]
	flags0[12] = VARP[598]
	flags0[13] = VARP[662]
	flags0[14] = VARP[721]
	flags0[15] = VARP[906]
	flags0[16] = VARP[1009]
	flags0[17] = VARP[1338]
	flags0[18] = VARP[1681]
	flags0[19] = VARP[2065]
	flags0[20] = VARP[2237]
	flags0[21] = VARP[2950]
	val int3: Int = 0
	val coord4: Coord = null
	val int5: Int = 0
	val count6: Int = 0
	while (count6 < count2) {
		if (cc_find(component0, count6) = ^true) {
			int3 = enum(int, int, enum_818, count6)
			coord4 = enum(int, coord, enum_819, int3)
			if (coord4 ! null) {
				if (testbit(flags0[coordx(coord4)], coordz(coord4)) = ^true) {
					~music_setcolour(0x0dc10d)
					int5 = calc(int5 + 1)
				} else if (int3 = 331 & VARBIT[1028] > 35) {
					~music_setcolour(0x0dc10d)
					int5 = calc(int5 + 1)
				} else {
					~music_setcolour(^red)
				}
			} else {
				~music_setcolour(0x0dc10d)
				int5 = calc(int5 + 1)
			}
		}
		count6 = calc(count6 + 1)
	}
	if_settext("${~tostring_spacer(~min(int5, count2), ",")} / ${~tostring_spacer(count2, ",")}", component1)
	return 
}
