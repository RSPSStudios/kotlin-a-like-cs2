// 1000 proc
fun xpdrops_setbar_progress(component0: Component, int1: Int, int2: Int, int3: Int, int4: Int): Int {

	val int5: Int = calc(int2 - int1)
	val int6: Int = calc(int3 - int1)
	val int7: Int = 0
	val int8: Int = 0
	val int9: Int = 0
	val int10: Int = 0
	if (int5 >= int6) {
		if_setsize(0, 0, ^setsize_minus, ^setsize_minus, component0)
		if (int4 = 1) {
			int8, int9 = 255, 210
		} else {
			int8, int9 = 0, 150
		}
		int10 = 1000
	} else if (int5 <= 0) {
		if_setsize(0, 0, ^setsize_abs, ^setsize_minus, component0)
		int8, int9 = 150, 0
	} else if (int6 <= 0) {
		if_setsize(0, 0, ^setsize_minus, ^setsize_minus, component0)
		int8, int9 = 150, 0
	} else if (int6 < 2) {
		if_setsize(0, 0, ^setsize_abs, ^setsize_minus, component0)
		int8, int9 = 150, 0
	} else {
		if (int6 > 1000000000) {
			int5, int6 = calc(int5 / 100000), calc(int6 / 100000)
		} else if (int6 > 100000000) {
			int5, int6 = calc(int5 / 10000), calc(int6 / 10000)
		} else if (int6 > 10000000) {
			int5, int6 = calc(int5 / 1000), calc(int6 / 1000)
		} else if (int6 > 1000000) {
			int5, int6 = calc(int5 / 100), calc(int6 / 100)
		} else if (int6 > 100000) {
			int5, int6 = calc(int5 / 10), calc(int6 / 10)
		}
		if (int5 >= int6) {
			int6 = calc(int5 + 1)
		}
		if_setsize(interpolate(0, int5, 0, int6, 16384), 0, ^setsize_2, ^setsize_minus, component0)
		int7 = calc(int6 / 2)
		if (int7 <= 0) {
			int7 = 1
		}
		if (int5 <= int7) {
			int8, int9 = 150, interpolate(0, int5, 0, int7, 150)
		} else {
			int8, int9 = calc(150 - interpolate(0, int5 - int7, 0, int7, 150)), 150
		}
		int10 = interpolate(0, int5, 0, int6, 1000)
	}
	if_setcolour(~rgb_to_hex(int8, int9, 0), component0)
	return int10
}
