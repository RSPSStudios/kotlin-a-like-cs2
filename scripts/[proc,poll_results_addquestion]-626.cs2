// 626 proc
fun poll_results_addquestion(int0: Int, string0: String, length1: Int, flags2: Int, int3: Int, int4: Int, int5: Int, int6: Int, int7: Int, int8: Int, int9: Int, int10: Int, int11: Int, int12: Int, int13: Int, int14: Int, int15: Int, int16: Int, int17: Int, int18: Int, int19: Int, int20: Int, int21: Int, int22: Int, int23: Int, int24: Int, int25: Int, int26: Int, int27: Int, int28: Int, int29: Int, int30: Int, int31: Int, int32: Int, int33: Int, int34: Int) {

	val width35: Int = if_getwidth(poll_results:11)
	val int36: Int = calc(width35 - 3 * 2)
	val int37: Int = VARCINT[43]
	val height38: Int = VARCINT[49]
	cc_create(poll_results:11, ^iftype_rectangle, VARCINT[43])
	VARCINT[43] = calc(VARCINT[43] + 1)
	cc_setposition(0, height38, ^setpos_abs_left, ^setpos_abs_top)
	cc_setcolour(^white)
	cc_setfill(true)
	cc_settrans(225)
	cc_create(poll_results:11, ^iftype_rectangle, VARCINT[43])
	VARCINT[43] = calc(VARCINT[43] + 1)
	cc_setposition(0, height38, ^setpos_abs_left, ^setpos_abs_top)
	cc_setcolour(0x777775)
	cc_setfill(false)
	cc_create(poll_results:11, ^iftype_rectangle, VARCINT[43])
	VARCINT[43] = calc(VARCINT[43] + 1)
	cc_setposition(1, calc(height38 + 1), ^setpos_abs_left, ^setpos_abs_top)
	cc_setcolour(0x474745)
	cc_setfill(false)
	VARCINT[49] = calc(VARCINT[49] + 3)
	val string1: String = ""
	string1, string0 = ~script632(string0)
	val int39: Int = calc(paraheight(string1, int36, p11_full) * 10 + 2)
	if (int39 < 15) {
		int39 = 15
	}
	cc_create(poll_results:11, ^iftype_text, VARCINT[43])
	VARCINT[43] = calc(VARCINT[43] + 1)
	cc_setposition(3, VARCINT[49], ^setpos_abs_left, ^setpos_abs_top)
	cc_setsize(int36, int39, ^setsize_abs, ^setsize_abs)
	VARCINT[49] = calc(VARCINT[49] + int39)
	cc_setcolour(0xff981f)
	cc_settextfont(p11_full)
	cc_settextalign(^settextalign_left, ^settextalign_centre, 0)
	cc_settextshadow(true)
	cc_settext(string1)
	string1, string0 = ~script632(string0)
	int39 = calc(paraheight(string1, int36, p12_full) * 12 + 5)
	cc_create(poll_results:11, ^iftype_text, VARCINT[43])
	VARCINT[43] = calc(VARCINT[43] + 1)
	cc_setposition(3, VARCINT[49], ^setpos_abs_left, ^setpos_abs_top)
	cc_setsize(int36, int39, ^setsize_abs, ^setsize_abs)
	VARCINT[49] = calc(VARCINT[49] + int39)
	cc_setcolour(^white)
	cc_settextfont(p12_full)
	cc_settextalign(^settextalign_left, ^settextalign_centre, 0)
	cc_settextshadow(true)
	cc_settext(string1)
	val string2: String = ""
	string1, string0 = ~script632(string0)
	string2, string0 = ~script632(string0)
	~poll_addlink(string1, string2, poll_results:11, int36, 3, p11_full, p11_full, 10, 2)
	val string3: String = string0
	int0[calc(41 + 1)]: Int
	if (int3 = -1) {
		int0[41] = 1
	}
	int0[0] = ~max(0, int3)
	int0[1] = ~max(0, int4)
	int0[2] = ~max(0, int5)
	int0[3] = ~max(0, int6)
	int0[4] = ~max(0, int7)
	int0[5] = ~max(0, int8)
	int0[6] = ~max(0, int9)
	int0[7] = ~max(0, int10)
	int0[8] = ~max(0, int11)
	int0[9] = ~max(0, int12)
	int0[10] = ~max(0, int13)
	int0[11] = ~max(0, int14)
	int0[12] = ~max(0, int15)
	int0[13] = ~max(0, int16)
	int0[14] = ~max(0, int17)
	int0[15] = ~max(0, int18)
	int0[16] = ~max(0, int19)
	int0[17] = ~max(0, int20)
	int0[18] = ~max(0, int21)
	int0[19] = ~max(0, int22)
	int0[20] = ~max(0, int23)
	int0[21] = ~max(0, int24)
	int0[22] = ~max(0, int25)
	int0[23] = ~max(0, int26)
	int0[24] = ~max(0, int27)
	int0[25] = ~max(0, int28)
	int0[26] = ~max(0, int29)
	int0[27] = ~max(0, int30)
	int0[28] = ~max(0, int31)
	int0[29] = ~max(0, int32)
	int0[30] = ~max(0, int33)
	int0[31] = ~max(0, int34)
	int0[38] = 0
	int0[39] = 100
	int0[40] = -1
	val int40: Int = 0
	val int41: Int = 0
	while (int41 < length1) {
		string1, string0 = ~script632(string0)
		int0[38] = parawidth(string1, int36, p11_full)
		if (int0[38] > int0[39]) {
			int0[39] = int0[38]
		}
		if (int0 = -1) {
			if (compare(lowercase(string1), "skip question") = 0) {
				int0[40] = int41
			} else {
				int40 = calc(int40 + int0[int41])
			}
		}
		int41 = calc(int41 + 1)
	}
	if (int0 ! -1) {
		int40 = int0
	}
	if (int40 <= 0) {
		int40 = 1
	}
	int1[length1]: Int
	val int42: Int = 1000
	int0[32] = ^max_32bit_int
	int0[33] = -1
	int0[34] = -1
	int0[35] = ^min_32bit_int
	int0[36] = -1
	int0[37] = -1
	int41 = 0
	while (int41 < length1) {
		if (int41 ! int0[40]) {
			int1[int41] = interpolate(0, int0[int41], 0, int40, 2000)
			if (calc(int1[int41] % 2) = 1 & (int0 ! -1 | length1 ! 3 | int41 ! 0 | int1[int41] ! calc(75 * 20 - 1))) {
				int1[int41] = calc(int1[int41] + 1)
			}
			int1[int41] = calc(int1[int41] / 2)
			if (int0[int41] > 0) {
				if (int0 = -1) {
					int42 = calc(int42 - int1[int41])
					if (int0[int41] < int0[32]) {
						int0[32] = int0[int41]
						int0[33] = int41
						int0[34] = -1
					} else if (int0[int41] = int0[32]) {
						int0[34] = int41
					}
				}
				if (int0[int41] > int0[35]) {
					int0[35] = int0[int41]
					int0[36] = int41
					int0[37] = -1
				} else if (int0[int41] = int0[35]) {
					int0[37] = int41
				}
			}
		}
		int41 = calc(int41 + 1)
	}
	if (int0 = -1 & int42 > 0 & int0[33] ! -1 & int0[34] = -1) {
		int1[int0[33]] = calc(int1[int0[33]] + int42)
	}
	if (int0[37] ! -1) {
		int0[36] = -1
	}
	if (int0[39] > 230) {
		int0[39] = 230
	}
	val int43: Int = calc(width35 - (3 + 95))
	val int44: Int = calc(3 + int0[39] + 5)
	val int45: Int = calc(int43 - int44 - 5)
	string0 = string3
	int41 = 0
	while (int41 < length1) {
		string1, string0 = ~script632(string0)
		if (int41 = 0) {
			string2 = string1
		} else if (int41 = 1 & (length1 = 2 | length1 = 3 & int0[40] = 2) & int0 = -1 & compare(lowercase(string2), "yes") = 0 & compare(lowercase(string1), "no") = 0 & int1[0] >= calc(75 * 10) & cc_find(poll_results:11, int37) = ^true) {
			cc_setcolour(^green)
		}
		int39 = calc(paraheight(string1, int0[39], p11_full) * 10 + 2)
		if (int39 < 15) {
			int39 = 15
		}
		cc_create(poll_results:11, ^iftype_text, VARCINT[43])
		VARCINT[43] = calc(VARCINT[43] + 1)
		.cc_create(poll_results:11, ^iftype_text, VARCINT[43])
		VARCINT[43] = calc(VARCINT[43] + 1)
		cc_setposition(3, VARCINT[49], ^setpos_abs_left, ^setpos_abs_top)
		.cc_setposition(int43, VARCINT[49], ^setpos_abs_left, ^setpos_abs_top)
		cc_setsize(int0[39], int39, ^setsize_abs, ^setsize_abs)
		.cc_setsize(95, int39, ^setsize_abs, ^setsize_abs)
		if (testbit(flags2, int41) = ^true) {
			cc_setcolour(0xffff7f)
			.cc_setcolour(0xffff7f)
		} else if (int41 = int0[40]) {
			cc_setcolour(0xafafaf)
			.cc_setcolour(0xafafaf)
		} else if (calc(int41 % 2) = 0) {
			cc_setcolour(0xffa82f)
			.cc_setcolour(0xffa82f)
		} else {
			cc_setcolour(0xff981f)
			.cc_setcolour(0xff981f)
		}
		cc_settextfont(p11_full)
		.cc_settextfont(p11_full)
		cc_settextalign(^settextalign_left, ^settextalign_centre, 0)
		.cc_settextalign(^settextalign_centre, ^settextalign_centre, 0)
		cc_settextshadow(true)
		.cc_settextshadow(true)
		cc_settext(string1)
		string1 = ","
		if (int0[41] = 1) {
			.cc_settext("-")
		} else if (int41 ! int0[40]) {
			.cc_settext("${tostring(calc(int1[int41] / 10))}.${tostring(calc(int1[int41] % 10))}% (${~tostring_spacer(int0[int41], string1)})")
			cc_create(poll_results:11, ^iftype_graphic, VARCINT[43])
			VARCINT[43] = calc(VARCINT[43] + 1)
			cc_setposition(int44, calc(VARCINT[49] + (int39 - 11) / 2), ^setpos_abs_left, ^setpos_abs_top)
			cc_setsize(interpolate(0, int0[int41], 0, int40, int45), 11, ^setsize_abs, ^setsize_abs)
			if (int41 = int0[36]) {
				cc_setgraphic("tradebacking_dark")
			} else {
				cc_setgraphic("tradebacking")
			}
			cc_settiling(true)
		} else {
			.cc_settext("(${~tostring_spacer(int0[int41], string1)})")
		}
		int41, VARCINT[49] = calc(int41 + 1), calc(VARCINT[49] + int39)
	}
	VARCINT[49] = calc(VARCINT[49] + 3)
	int39 = calc(VARCINT[49] - height38)
	if (cc_find(poll_results:11, int37) = ^true) {
		cc_setsize(width35, int39, ^setsize_abs, ^setsize_abs)
	}
	if (cc_find(poll_results:11, calc(int37 + 1)) = ^true) {
		cc_setsize(width35, int39, ^setsize_abs, ^setsize_abs)
	}
	if (cc_find(poll_results:11, calc(int37 + 2)) = ^true) {
		cc_setsize(calc(width35 - 2), calc(int39 - 2), ^setsize_abs, ^setsize_abs)
	}
	VARCINT[49] = calc(VARCINT[49] + 3)
	return 
}
