// 206 clientscript
fun duel_confirm_text() {

	val string0: String = ""
	val string1: String = ""
	if (VARBIT[642] > 0) {
		string0 = "${string0}Some worn items will be taken off.<br>"
	}
	if (testbit(VARP[286], 7) = ^true | testbit(VARP[286], 13) = ^true) {
		string0 = "${string0}Boosted stats will be restored.<br>"
	}
	if (testbit(VARP[286], 9) = ^true) {
		string0 = "${string0}Existing prayers will be stopped.<br>"
	}
	if (testbit(VARP[286], 0) = ^true) {
		string1 = "${string1}You cannot forfeit the duel.<br>"
	}
	if (testbit(VARP[286], 1) = ^true) {
		string1 = "${string1}You cannot move.<br>"
	}
	if (testbit(VARP[286], 2) = ^true) {
		string1 = "${string1}You cannot switch weapons.<br>"
	}
	if (testbit(VARP[286], 4) = ^true) {
		string1 = "${string1}You cannot use Ranged attacks <col=ff0000>or salamanders<col=ffffff>.<br>"
	}
	if (testbit(VARP[286], 5) = ^true) {
		string1 = "${string1}You cannot use Melee attacks <col=ff0000>or salamanders<col=ffffff>.<br>"
	}
	if (testbit(VARP[286], 6) = ^true) {
		string1 = "${string1}You cannot use Magic attacks <col=ff0000>or salamanders<col=ffffff>.<br>"
	}
	if (testbit(VARP[286], 13) = ^true) {
		string1 = "${string1}You cannot use special attacks.<br>"
	}
	if (testbit(VARP[286], 12) = ^true) {
		string1 = "${string1}You can only attack with 'fun' weapons.<br>"
	}
	if (testbit(VARP[286], 7) = ^true) {
		string1 = "${string1}You cannot use potions or drinks.<br>"
	}
	if (testbit(VARP[286], 8) = ^true) {
		string1 = "${string1}You cannot use food.<br>"
	}
	if (testbit(VARP[286], 9) = ^true) {
		string1 = "${string1}You cannot use Prayer.<br>"
	}
	if (testbit(VARP[286], 10) = ^true) {
		string1 = "${string1}There will be obstacles in the arena.<br>"
	}
	if (testbit(VARP[286], 17) = ^true | testbit(VARP[286], 19) = ^true) {
		string1 = "${string1}You can't use 2H weapons such as bows.<br>"
	}
	if_settext(string0, interface_476:68)
	if_settext(string1, interface_476:70)
	if_setsize(100, calc(11 * paraheight(if_gettext(interface_476:66), 100, p11_full)), ^setsize_abs, ^setsize_abs, interface_476:66)
	if_setsize(132, calc(11 * paraheight(string0, 132, p11_full)), ^setsize_abs, ^setsize_abs, interface_476:68)
	if_setsize(132, calc(11 * paraheight(string1, 132, p11_full)), ^setsize_abs, ^setsize_abs, interface_476:70)
	if_setposition(2, 2, ^setpos_abs_left, ^setpos_abs_top, interface_476:71)
	if (if_gethide(interface_476:71) = true) {
		if_setposition(2, 2, ^setpos_abs_left, ^setpos_abs_top, interface_476:65)
	} else {
		if_setposition(2, calc(if_gety(interface_476:71) + if_getheight(interface_476:71) + 2), ^setpos_abs_left, ^setpos_abs_top, interface_476:65)
	}
	if_setposition(2, calc(if_gety(interface_476:65) + if_getheight(interface_476:65) + 2), ^setpos_abs_left, ^setpos_abs_top, interface_476:66)
	if_setposition(2, calc(if_gety(interface_476:66) + if_getheight(interface_476:66) + 2), ^setpos_abs_left, ^setpos_abs_top, interface_476:67)
	if_setposition(2, calc(if_gety(interface_476:67) + if_getheight(interface_476:67) + 2), ^setpos_abs_left, ^setpos_abs_top, interface_476:68)
	if_setposition(2, calc(if_gety(interface_476:68) + if_getheight(interface_476:68) + 2), ^setpos_abs_left, ^setpos_abs_top, interface_476:69)
	if_setposition(2, calc(if_gety(interface_476:69) + if_getheight(interface_476:69) + 2), ^setpos_abs_left, ^setpos_abs_top, interface_476:70)
	val height0: Int = calc(if_gety(interface_476:70) + if_getheight(interface_476:70) + 2)
	if (height0 > if_getheight(interface_476:62)) {
		if_setscrollsize(0, height0, interface_476:63)
		if_sethide(false, interface_476:64)
		~scrollbar_vertical(interface_476:64, interface_476:63, "scrollbar_dragger_v2,3", "scrollbar_dragger_v2,0", "scrollbar_dragger_v2,1", "scrollbar_dragger_v2,2", "scrollbar_v2,0", "scrollbar_v2,1")
	} else {
		if_sethide(true, interface_476:64)
		if_setscrollpos(0, 0, interface_476:63)
	}
	return 
}
