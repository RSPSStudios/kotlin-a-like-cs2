// 1376 clientscript
fun poh_viewer_setroom(int0: Int, enum1: Enum, int2: Int, flags3: Int, flags4: Int) {

	val component5: Component = enum(int, component, enum_1424, int0)
	if (component5 = null) {
		return 
	}
	if (testbit(flags4, 30) = ^true) {
		flags3, flags4 = setbit(flags3, 31), clearbit(flags4, 30)
	}
	if_sethide(true, component5)
	val int6: Int = 0
	if (testbit(flags3, 0) = ^true) {
		int6 = setbit(int6, 0)
	}
	if (testbit(flags3, 1) = ^true) {
		int6 = setbit(int6, 1)
	}
	if (testbit(flags3, 2) = ^true) {
		int6 = setbit(int6, 2)
	}
	val int7: Int = 0
	if (testbit(flags3, 3) = ^true) {
		int7 = setbit(int7, 0)
	}
	if (testbit(flags3, 4) = ^true) {
		int7 = setbit(int7, 1)
	}
	if (testbit(flags3, 5) = ^true) {
		int7 = setbit(int7, 2)
	}
	val int8: Int = 0
	if (testbit(flags3, 6) = ^true) {
		int8 = setbit(int8, 0)
	}
	if (testbit(flags3, 7) = ^true) {
		int8 = setbit(int8, 1)
	}
	val int9: Int = 0
	if (testbit(flags3, 8) = ^true) {
		int9 = setbit(int9, 0)
	}
	if (testbit(flags3, 9) = ^true) {
		int9 = setbit(int9, 1)
	}
	val int10: Int = 0
	if (testbit(flags3, 10) = ^true) {
		int10 = setbit(int10, 0)
	}
	if (testbit(flags3, 11) = ^true) {
		int10 = setbit(int10, 1)
	}
	if (testbit(flags3, 12) = ^true) {
		int10 = setbit(int10, 2)
	}
	if (testbit(flags3, 13) = ^true) {
		int10 = setbit(int10, 3)
	}
	if (testbit(flags3, 14) = ^true) {
		int10 = setbit(int10, 4)
	}
	val int11: Int = 0
	if (testbit(flags3, 15) = ^true) {
		int11 = setbit(int11, 0)
	}
	if (testbit(flags3, 16) = ^true) {
		int11 = setbit(int11, 1)
	}
	if (testbit(flags3, 17) = ^true) {
		int11 = setbit(int11, 2)
	}
	if (testbit(flags4, 0) = ^true) {
		int11 = setbit(int11, 3)
	}
	if (testbit(flags4, 1) = ^true) {
		int11 = setbit(int11, 4)
	}
	val int12: Int = 0
	if (testbit(flags3, 18) = ^true) {
		int12 = setbit(int12, 0)
	}
	if (testbit(flags3, 19) = ^true) {
		int12 = setbit(int12, 1)
	}
	if (testbit(flags3, 20) = ^true) {
		int12 = setbit(int12, 2)
	}
	if (testbit(flags4, 2) = ^true) {
		int12 = setbit(int12, 3)
	}
	if (testbit(flags4, 3) = ^true) {
		int12 = setbit(int12, 4)
	}
	val int13: Int = 0
	if (testbit(flags3, 21) = ^true) {
		int13 = setbit(int13, 0)
	}
	if (testbit(flags3, 22) = ^true) {
		int13 = setbit(int13, 1)
	}
	if (testbit(flags3, 23) = ^true) {
		int13 = setbit(int13, 2)
	}
	if (testbit(flags4, 4) = ^true) {
		int13 = setbit(int13, 3)
	}
	if (testbit(flags4, 5) = ^true) {
		int13 = setbit(int13, 4)
	}
	val int14: Int = 0
	if (testbit(flags3, 24) = ^true) {
		int14 = setbit(int14, 0)
	}
	if (testbit(flags3, 25) = ^true) {
		int14 = setbit(int14, 1)
	}
	if (testbit(flags4, 6) = ^true) {
		int14 = setbit(int14, 2)
	}
	if (testbit(flags4, 7) = ^true) {
		int14 = setbit(int14, 3)
	}
	if (testbit(flags4, 8) = ^true) {
		int14 = setbit(int14, 4)
	}
	val int15: Int = 0
	if (testbit(flags3, 26) = ^true) {
		int15 = setbit(int15, 0)
	}
	if (testbit(flags3, 27) = ^true) {
		int15 = setbit(int15, 1)
	}
	if (testbit(flags4, 9) = ^true) {
		int15 = setbit(int15, 2)
	}
	if (testbit(flags4, 10) = ^true) {
		int15 = setbit(int15, 3)
	}
	if (testbit(flags4, 11) = ^true) {
		int15 = setbit(int15, 4)
	}
	val int16: Int = 0
	if (testbit(flags3, 28) = ^true) {
		int16 = setbit(int16, 0)
	}
	if (testbit(flags3, 29) = ^true) {
		int16 = setbit(int16, 1)
	}
	if (testbit(flags4, 12) = ^true) {
		int16 = setbit(int16, 2)
	}
	if (testbit(flags4, 13) = ^true) {
		int16 = setbit(int16, 3)
	}
	if (testbit(flags4, 14) = ^true) {
		int16 = setbit(int16, 4)
	}
	val int17: Int = 0
	if (testbit(flags3, 30) = ^true) {
		int17 = setbit(int17, 0)
	}
	if (testbit(flags3, 31) = ^true) {
		int17 = setbit(int17, 1)
	}
	if (testbit(flags4, 15) = ^true) {
		int17 = setbit(int17, 2)
	}
	if (testbit(flags4, 16) = ^true) {
		int17 = setbit(int17, 3)
	}
	if (testbit(flags4, 17) = ^true) {
		int17 = setbit(int17, 4)
	}
	val int18: Int = 0
	if (testbit(flags4, 18) = ^true) {
		int18 = setbit(int18, 0)
	}
	if (testbit(flags4, 19) = ^true) {
		int18 = setbit(int18, 1)
	}
	if (testbit(flags4, 20) = ^true) {
		int18 = setbit(int18, 2)
	}
	if (testbit(flags4, 21) = ^true) {
		int18 = setbit(int18, 3)
	}
	if (testbit(flags4, 22) = ^true) {
		int18 = setbit(int18, 4)
	}
	val int19: Int = 0
	if (testbit(flags4, 23) = ^true) {
		int19 = setbit(int19, 0)
	}
	if (testbit(flags4, 24) = ^true) {
		int19 = setbit(int19, 1)
	}
	if (testbit(flags4, 25) = ^true) {
		int19 = setbit(int19, 2)
	}
	if (testbit(flags4, 26) = ^true) {
		int19 = setbit(int19, 3)
	}
	if (testbit(flags4, 27) = ^true) {
		int19 = setbit(int19, 4)
	}
	val obj20: Obj = enum(int, obj, enum_250, int10)
	if_setopbase("<col=ff9040>${oc_name(obj20)}</col>", component5)
	~script1385(int0, int6, int8, int7)
	cc_deleteall(component5)
	cc_create(component5, ^iftype_graphic, 0)
	cc_setsize(0, 0, ^setsize_minus, ^setsize_minus)
	cc_setposition(0, 0, ^setpos_abs_centre, ^setpos_abs_centre)
	cc_setgraphic(enum(int, graphic, enum_1423, int10))
	cc_set2dangle(calc(16384 * (4 - int9) % 65536))
	cc_create(component5, ^iftype_graphic, 1)
	cc_setsize(0, 0, ^setsize_minus, ^setsize_minus)
	cc_setposition(0, 0, ^setpos_abs_centre, ^setpos_abs_centre)
	cc_setgraphic("tradebacking_light")
	cc_settiling(true)
	cc_settrans(75)
	cc_sethide(true)
	val string0: String = "${oc_name(obj20)}:"
	val int21: Int = 0
	string0, int21 = ~poh_viewer_roomtooltip(string0, int11, enum_1425, enum1, int21)
	string0, int21 = ~poh_viewer_roomtooltip(string0, int12, enum_1426, enum1, int21)
	string0, int21 = ~poh_viewer_roomtooltip(string0, int13, enum_1427, enum1, int21)
	string0, int21 = ~poh_viewer_roomtooltip(string0, int14, enum_1428, enum1, int21)
	string0, int21 = ~poh_viewer_roomtooltip(string0, int15, enum_1429, enum1, int21)
	string0, int21 = ~poh_viewer_roomtooltip(string0, int16, enum_1430, enum1, int21)
	string0, int21 = ~poh_viewer_roomtooltip(string0, int17, enum_1431, enum1, int21)
	string0, int21 = ~poh_viewer_roomtooltip(string0, int18, enum_1432, enum1, int21)
	string0, int21 = ~poh_viewer_roomtooltip(string0, int19, enum_3560, enum1, int21)
	if (int21 > 0) {
		string0 = append(string0, "</col>")
	} else {
		string0 = append(string0, " <col=4f4f4f>(empty)</col>")
	}
	cc_create(component5, ^iftype_graphic, 2)
	cc_setsize(17, 17, ^setsize_abs, ^setsize_abs)
	cc_setposition(2, 2, ^setpos_abs_left, ^setpos_abs_top)
	cc_setgraphic("tick")
	~poh_viewer_room_indicator(int0)
	if_setonvartransmit(component5)  {
		poh_viewer_room_indicator(event_com, cc_getid, int0){VARP[780]}
	}
	if_setonmouserepeat {
		poh_viewer_room_hover(true, event_com, cc_getid, string0)
	}
	if_setonmouseleave {
		poh_viewer_room_hover(false, event_com, cc_getid, string0)
	}
	return 
}
