// 3088 proc
fun br_reward_shop_itemdraw(int0: Int, y1: Int, int2: Int, int3: Int, component4: Component, component5: Component, component6: Component, component7: Component, int8: Int, int9: Int): Int {

	.cc_create(component5, ^iftype_rectangle, int8)
	int8 = calc(int8 + 1)
	.cc_setsize(int3, 32, ^setsize_abs, ^setsize_abs)
	.cc_setposition(int2, y1, ^setpos_abs_left, ^setpos_abs_top)
	.cc_setcolour(^black)
	.cc_setfill(true)
	.cc_settrans(255)
	.cc_setop(1, enum(int, string, enum_2634, int0))
	val namedobj10: Namedobj = enum(int, namedobj, enum_2633, int0)
	val num11: Int = enum(int, int, enum_3048, int0)
	if (namedobj10 = null) {
		namedobj10 = obj_6512
	}
	cc_create(component5, ^iftype_graphic, int8)
	int8 = calc(int8 + 1)
	cc_setsize(36, 32, ^setsize_abs, ^setsize_abs)
	cc_setposition(calc(int2 + (40 - 36) / 2), y1, ^setpos_abs_left, ^setpos_abs_top)
	if (num11 = 1) {
		cc_setobject_nonum(namedobj10, 1)
	} else {
		cc_setobject(namedobj10, num11)
	}
	cc_setgraphicshadow(0x333333)
	cc_setoutline(1)
	val width12: Int = calc(int3 - 40)
	int2 = calc(int2 + 40)
	cc_create(component5, ^iftype_text, int8)
	int8 = calc(int8 + 1)
	cc_setsize(width12, 32, ^setsize_abs, ^setsize_abs)
	cc_setposition(int2, y1, ^setpos_abs_left, ^setpos_abs_top)
	cc_settextalign(^settextalign_left, ^settextalign_top, 0)
	cc_settextshadow(true)
	val colour13: Int = 0xff981f
	val colour14: Int = 0xffb83f
	val num15: Int = inv_getnum(inv_422, int0)
	val int16: Int = enum(int, int, enum_2636, int0)
	val mes0: String = ""
	val int17: Int = 0
	if (oc_members(namedobj10) = ^true & map_members = ^false) {
		cc_setcolour(0x9f9f9f)
		mes0 = "You must be on a members' world to purchase that item."
		.cc_setonop {
			br_reward_shop_refuse(mes0, component4, component5, component6, component7)
		}
		colour13, colour14 = 0x9f9f9f, 0x9f9f9f
	} else if (VARP[262] < int16) {
		cc_setcolour(0x9f9f9f)
		if (int16 > 1) {
			mes0 = "You must achieve ${tostring(int16)} wins before you can have that item."
		} else {
			mes0 = "You must achieve one win before you can have that item."
		}
		.cc_setonop {
			br_reward_shop_refuse(mes0, component4, component5, component6, component7)
		}
		colour13, colour14 = 0x9f9f9f, 0x9f9f9f
	} else if (VARP[261] < num15) {
		cc_setcolour(0x9f9f9f)
		mes0 = "You need ${~pest_rewards_costpoints(num15)} to claim that reward."
		.cc_setonop {
			br_reward_shop_refuse(mes0, component4, component5, component6, component7)
		}
		colour13, colour14 = 0x9f9f9f, 0x9f9f9f
	} else {
		if (int9 = int0) {
			cc_setcolour(^white)
		} else {
			cc_setcolour(0x00df00)
		}
		.cc_setonop {
			br_reward_shop_select(int0, component4, component5, component6, component7)
		}
	}
	if (int0 = 66) {
		int17 = VARBIT[9520]
	} else if (int0 = 67) {
		int17 = VARBIT[9521]
	} else if (int0 = 68) {
		int17 = VARBIT[9522]
	} else if (int0 = 69) {
		int17 = VARBIT[9523]
	}
	if (int17 = 1) {
		if (int9 = int0) {
			cc_setcolour(^white)
		} else {
			cc_setcolour(0x00df00)
		}
		.cc_setonop {
			br_reward_shop_select(int0, component4, component5, component6, component7)
		}
	} else if (int17 = 2) {
		if (int9 = int0) {
			cc_setcolour(^white)
		} else {
			cc_setcolour(0x00df00)
		}
		.cc_setonop {
			br_reward_shop_select(int0, component4, component5, component6, component7)
		}
	}
	val string1: String = enum(int, string, enum_2634, int0)
	if (parawidth(string1, 512, p12_full) > width12) {
		cc_settextfont(p11_full)
	} else {
		cc_settextfont(p12_full)
	}
	cc_settext(string1)
	cc_create(component5, ^iftype_text, int8)
	int8 = calc(int8 + 1)
	cc_setsize(width12, 32, ^setsize_abs, ^setsize_abs)
	cc_setposition(int2, y1, ^setpos_abs_left, ^setpos_abs_top)
	cc_settextalign(^settextalign_left, ^settextalign_bottom, 0)
	cc_settextfont(p11_full)
	cc_settextshadow(true)
	if (num15 > 0) {
		cc_settext(~pest_rewards_costpoints(num15))
	} else if (int16 > 0) {
		if (int16 > 1) {
			cc_settext("${tostring(int16)} wins")
		} else {
			cc_settext("One win")
		}
	} else {
		cc_settext("Free")
	}
	if (int17 = 1) {
		cc_settext("Enable")
	} else if (int17 = 2) {
		cc_settext("Disable")
	}
	if (int9 = int0) {
		cc_setcolour(^white)
		.cc_setonmouserepeatnull
		.cc_setonmouseleavenull
	} else {
		cc_setcolour(colour13)
		.cc_setonmouserepeat {
			cc_colour_swapper(event_com, cc_getid, colour14)
		}
		.cc_setonmouseleave {
			cc_colour_swapper(event_com, cc_getid, colour13)
		}
	}
	return int8
}
