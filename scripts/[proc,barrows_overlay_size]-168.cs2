// 168 proc
fun barrows_overlay_size(component0: Component, component1: Component, component2: Component, component3: Component, component4: Component, component5: Component, component6: Component, component7: Component, component8: Component, component9: Component, int10: Int) {

	val enum11: Enum = ~toplevel_getcomponents
	if (enum11 = null) {
		return 
	}
	val colour12: Int = 0x4d4d2f
	val setposh13: Int = ^setpos_abs_left
	val setposh14: Int = ^setpos_abs_right
	if (~inzone(0_55_151_0_0, 3_55_151_63_63, coord) = 1) {
		if_sethide(false, component1)
		if_sethide(false, component8)
		if_sethide(false, component9)
	} else if (~inzone(0_55_51_26_4, 0_55_51_63_55, coord) = 1) {
		if_sethide(true, component1)
		if_sethide(false, component8)
		if_sethide(false, component9)
	} else {
		if_sethide(true, component1)
		if_sethide(true, component8)
		if_sethide(true, component9)
	}
	~hud_clamp(component1)
	val x15: Int = enum(enum, int, enum_1135, enum11)
	val x16: Int = 5
	val y17: Int = 200
	val y18: Int = 20
	val setposh19: Int = ^setpos_abs_left
	if (x15 > 0) {
		if (enum11 = enum_1745) {
			x15, x16 = 45, 220
			y17, y18 = 183, 70
			setposh19 = ^setpos_abs_right
		} else {
			x15 = 18
		}
		if_setposition(x15, y17, ^setpos_abs_right, ^setpos_abs_top, component8)
		if_setposition(x16, y18, setposh19, ^setpos_abs_top, component9)
		colour12, setposh13, setposh14 = 0xa0a0a0, ^setpos_abs_right, ^setpos_abs_left
	} else {
		if_setposition(10, 8, ^setpos_abs_right, ^setpos_abs_bottom, component8)
		if_setposition(10, 28, ^setpos_abs_right, ^setpos_abs_bottom, component9)
	}
	if_setcolour(colour12, component8)
	val int20: Int = 0
	while (int20 < 6) {
		if (cc_find(component9, calc(int20 * 2)) = ^true & .cc_find(component9, calc(int20 * 2 + 1)) = ^true) {
			cc_setposition(0, calc(int20 * 17), setposh14, ^setpos_abs_top)
			.cc_setposition(0, calc(int20 * 17), setposh13, ^setpos_abs_top)
			cc_setcolour(colour12)
		}
		int20 = calc(int20 + 1)
	}
	val int21: Int = if_getheight(component1)
	if (int21 < 334) {
		int21 = 334
	} else if (int21 > 1500) {
		int21 = 1500
	}
	if (int21 = int10) {
		return 
	}
	val int22: Int = calc(400 - interpolate(0, invpow(int21 - 334, 2), 0, invpow(1500 - 334, 2), 280))
	if_setmodelangle(0, 0, 0, 0, 0, int22, component2)
	if_setmodelangle(0, 0, 0, 0, 0, int22, component3)
	if_setmodelangle(0, 0, 0, 0, 0, int22, component4)
	if_setmodelangle(0, 0, 0, 0, 0, int22, component5)
	if_setmodelangle(0, 0, 0, 0, 0, int22, component6)
	if_setmodelangle(0, 0, 0, 0, 0, int22, component7)
	if_sethide(true, component2)
	if_sethide(true, component3)
	if_sethide(true, component4)
	if_sethide(true, component5)
	if_sethide(true, component6)
	if_sethide(true, component7)
	if_setontimer({
		barrows_overlay_size(component0, component1, component2, component3, component4, component5, component6, component7, component8, component9, int21)
	}, component0)
	return 
}
