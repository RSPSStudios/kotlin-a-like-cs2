// 395 proc
fun stats_setlevels(stat0: Stat, component1: Component, string0: String, component2: Component) {

	val boolean3: Boolean = enum(stat, boolean, enum_1497, stat0)
	cc_settext(tostring(stat(stat0)))
	val lvl4: Int = stat_base(stat0)
	.cc_settext(tostring(lvl4))
	val xp5: Int = stat_xp(stat0)
	val string1: String = ","
	val string2: String = "${string0} XP:"
	val string3: String = ~tostring_spacer(xp5, string1)
	val int6: Int = 0
	if (VARBIT[4181] = 0) {
		if (lvl4 < 99) {
			int6 = enum(int, int, enum_256, calc(lvl4 + 1))
			string2 = append(string2, "|Next level at:|Remaining XP:")
			string3 = append(string3, "|${~tostring_spacer(int6, string1)}|${~tostring_spacer(calc(int6 - xp5), string1)}")
		}
	} else {
		string2 = append(string2, "|Next level at:")
		string3 = append(string3, "|${~tostring_spacer(enum(int, int, enum_256, calc(lvl4 + 1)), string1)}")
	}
	val int7: Int = 0
	val int8: Int = 0
	val int9: Int = 0
	val int10: Int = 0
	if (~deadman_world = 1) {
		int7 = ~script1936(stat0)
		if (int7 ! -1) {
			int7 = calc(int7 / 10)
			if (int7 > xp5) {
				string2 = append(string2, "|<col=7c0808>XP to regain:</col>")
				string3 = append(string3, "|<col=7c0808>${~tostring_spacer(calc(int7 - xp5), string1)}</col>")
				int8 = 1
			}
		}
		if (int8 = 0 & VARP[1588] > 0) {
			when (stat0): Stat {
				attack, strength, magic -> {
				
					int10 = ~script2031(20)
					if (int10 > 0) {
						string2 = append(string2, "|<col=7c0808>XP permitted:</col>")
						string3 = append(string3, "|<col=7c0808>${~tostring_spacer(int10, string1)}</col>")
					} else {
						int9 = 1
						string2 = append(string2, "|<col=7c0808>XP permitted:</col>")
						string3 = append(string3, "|<col=7c0808>NONE</col>")
					}
				}
				ranged -> {
				
					int10 = ~script2031(30)
					if (int10 > 0) {
						string2 = append(string2, "|<col=7c0808>XP permitted:</col>")
						string3 = append(string3, "|<col=7c0808>${~tostring_spacer(int10, string1)}</col>")
					} else {
						int9 = 1
						string2 = append(string2, "|<col=7c0808>XP permitted:</col>")
						string3 = append(string3, "|<col=7c0808>NONE</col>")
					}
				}
				defence -> {
				
					int10 = ~script2031(40)
					if (int10 > 0) {
						string2 = append(string2, "|<col=7c0808>XP permitted:</col>")
						string3 = append(string3, "|<col=7c0808>${~tostring_spacer(int10, string1)}</col>")
					} else {
						int9 = 1
						string2 = append(string2, "|<col=7c0808>XP permitted:</col>")
						string3 = append(string3, "|<col=7c0808>NONE</col>")
					}
				}
			}
		}
	}
	if (.cc_find(component1, 5) = ^true) {
		if (int9 = 1) {
			.cc_sethide(false)
		} else {
			.cc_sethide(true)
		}
	} else {
		.cc_create(component1, ^iftype_graphic, 5)
		.cc_setposition(6, 0, ^setpos_abs_left, ^setpos_abs_centre)
		.cc_setsize(19, 19, ^setsize_abs, ^setsize_abs)
		.cc_setgraphic("warning_icons,0")
		.cc_setgraphicshadow(0x010101)
		if (int9 = 1) {
			.cc_sethide(false)
		} else {
			.cc_sethide(true)
		}
	}
	if (boolean3 = true & map_members = ^false & VARCINT[103] = 0) {
		string2 = "<col=ff0000>${string0}:</col>"
		string3 = "<col=ff0000>Members Only</col>"
	}
	if (~on_mobile = true) {
		if_setonop {
			stats_op(event_opindex, event_com, -1, component2, string2, string3, p12_full)
		}
		if (VARCINT[218] = component1 & VARCINT[217] = -1) {
			~script2344(component1, -1, component2, string2, string3, p12_full)
		}
	} else {
		if_setonmouserepeat {
			script992(event_com, -1, component2, string2, string3, p12_full, calc(25 / 5))
		}
		VARCINT[2] = 0
	}
	return 
}
