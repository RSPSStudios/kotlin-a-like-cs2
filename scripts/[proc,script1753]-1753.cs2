// 1753 proc
fun script1753(coord0: Coord, coord1: Coord, boolean2: Boolean, int3: Int, component4: Component, int5: Int, int6: Int, int7: Int, int8: Int, int9: Int): Int {

	val comsubid10: Int = calc(int9 + 1)
	val comsubid11: Int = calc(int9 + 2)
	val comsubid12: Int = calc(int9 + 3)
	val int13: Int = calc(int9 + 4)
	val int14: Int = 0
	val int15: Int = 0
	int14, int15 = ~worldmap_elements_chooseposition(coord0, boolean2, component4, int5, int6, int7, int8)
	val int16: Int = 0
	val int17: Int = 0
	int16, int17 = ~worldmap_elements_chooseposition(coord1, boolean2, component4, int5, int6, int7, int8)
	val x18: Int = calc(int14 + (int16 - int14) / 2)
	val y19: Int = calc(int15 + (int17 - int15) / 2)
	val int20: Int = calc(int16 - int14)
	val int21: Int = calc(int17 - int15)
	val boolean22: Boolean = false
	if (int20 < 0) {
		if (int21 < 0) {
			int20 = calc(0 - int20)
			int21 = calc(0 - int21)
		} else {
			int20 = calc(0 - int20)
			boolean22 = true
		}
	} else if (int21 < 0) {
		int21 = calc(0 - int21)
		boolean22 = true
	}
	if (cc_find(component4, int9) = ^true & .cc_find(component4, comsubid10) = ^true) {
		if (testbit(VARBIT[5640], 1) = ^true) {
			cc_sethide(true)
			.cc_sethide(true)
		} else {
			cc_sethide(false)
			.cc_sethide(false)
		}
		cc_setposition(calc(int14 + 1), calc(int15 + 1), ^setpos_abs_centre, ^setpos_abs_centre)
		.cc_setposition(calc(int16 + 1), calc(int17 + 1), ^setpos_abs_centre, ^setpos_abs_centre)
	} else {
		cc_create(component4, ^iftype_rectangle, int9)
		.cc_create(component4, ^iftype_rectangle, comsubid10)
		if (testbit(VARBIT[5640], 1) = ^true) {
			cc_sethide(true)
			.cc_sethide(true)
		} else {
			cc_sethide(false)
			.cc_sethide(false)
		}
		cc_setposition(calc(int14 + 1), calc(int15 + 1), ^setpos_abs_centre, ^setpos_abs_centre)
		.cc_setposition(calc(int16 + 1), calc(int17 + 1), ^setpos_abs_centre, ^setpos_abs_centre)
		cc_setsize(int3, int3, ^setsize_abs, ^setsize_abs)
		.cc_setsize(int3, int3, ^setsize_abs, ^setsize_abs)
		cc_setcolour(^black)
		.cc_setcolour(^black)
		cc_setfill(true)
		.cc_setfill(true)
	}
	val int23: Int = 0
	val int24: Int = 0
	val int25: Int = 0
	val colour26: Int = ^black
	if (cc_find(component4, comsubid11) = ^true & .cc_find(component4, comsubid12) = ^true) {
		if (testbit(VARBIT[5640], 1) = ^true) {
			cc_sethide(true)
			.cc_sethide(true)
		} else {
			cc_sethide(false)
			.cc_sethide(false)
		}
		cc_setposition(int14, int15, ^setpos_abs_centre, ^setpos_abs_centre)
		.cc_setposition(int16, int17, ^setpos_abs_centre, ^setpos_abs_centre)
	} else {
		int23, int24, int25 = ~hex_to_rgb(^yellow)
		int23, int24, int25 = ~max(calc(int23 - 48), 0), ~max(calc(int24 - 48), 0), ~max(calc(int25 - 48), 0)
		colour26 = ~rgb_to_hex(int23, int24, int25)
		cc_create(component4, ^iftype_rectangle, comsubid11)
		.cc_create(component4, ^iftype_rectangle, comsubid12)
		if (testbit(VARBIT[5640], 1) = ^true) {
			cc_sethide(true)
			.cc_sethide(true)
		} else {
			cc_sethide(false)
			.cc_sethide(false)
		}
		cc_setposition(int14, int15, ^setpos_abs_centre, ^setpos_abs_centre)
		.cc_setposition(int16, int17, ^setpos_abs_centre, ^setpos_abs_centre)
		cc_setsize(int3, int3, ^setsize_abs, ^setsize_abs)
		.cc_setsize(int3, int3, ^setsize_abs, ^setsize_abs)
		cc_setcolour(colour26)
		.cc_setcolour(colour26)
		cc_setfill(true)
		.cc_setfill(true)
		cc_setonmouseover {
			script1755(true, component4, comsubid11, comsubid12, int13, ^yellow)
		}
		.cc_setonmouseover {
			script1755(true, component4, comsubid11, comsubid12, int13, ^yellow)
		}
		cc_setonmouseleave {
			script1755(false, component4, comsubid11, comsubid12, int13, colour26)
		}
		.cc_setonmouseleave {
			script1755(false, component4, comsubid11, comsubid12, int13, colour26)
		}
		cc_setop(1, "Scroll map")
		.cc_setop(1, "Scroll map")
		cc_setonop {
			script1756(event_opindex, coord1, boolean2)
		}
		.cc_setonop {
			script1756(event_opindex, coord0, boolean2)
		}
	}
	if (cc_find(component4, int13) = ^true) {
		cc_setposition(x18, y19, ^setpos_abs_centre, ^setpos_abs_centre)
		cc_setsize(int20, int21, ^setsize_abs, ^setsize_abs)
	} else {
		cc_create(component4, ^iftype_line, int13)
		cc_setposition(x18, y19, ^setpos_abs_centre, ^setpos_abs_centre)
		cc_setsize(int20, int21, ^setsize_abs, ^setsize_abs)
		cc_setlinedirection(boolean22)
		cc_setlinewid(calc(1 + int3 / 5))
		cc_setcolour(^yellow)
		cc_sethide(true)
	}
	return calc(int13 + 1)
}
