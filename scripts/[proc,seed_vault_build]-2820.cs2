// 2820 proc
fun seed_vault_build(component0: Component, component1: Component, component2: Component, component3: Component, component4: Component, component5: Component, component6: Component) {

	VARCINT[374] = clientclock
	cc_deleteall(component0)
	cc_deleteall(component1)
	cc_deleteall(component2)
	cc_deleteall(component3)
	cc_deleteall(component6)
	val int7: Int = enum_getoutputcount(enum_2304)
	int0[calc(int7 + 1)]: Int
	val int8: Int = 0
	val obj9: Obj = null
	val int10: Int = 50
	val int11: Int = 40
	while (int8 < 90) {
		obj9 = inv_getobj(inv_626, int8)
		cc_create(component0, ^iftype_graphic, int8)
		cc_setsize(36, 32, ^setsize_abs, ^setsize_abs)
		.cc_create(component1, ^iftype_text, int8)
		.cc_setsize(int10, 30, ^setsize_abs, ^setsize_abs)
		if (obj9 ! null & ~seed_vault_filteritem(obj9) = 1) {
			cc_setop(10, "Examine")
			cc_setopbase("<col=ff9040>${oc_name(obj9)}</col>")
			cc_setgraphicshadow(0x333333)
			cc_setoutline(1)
			if (oc_unplaceholder(obj9) ! obj9) {
				cc_setobject(obj9, 0)
				cc_settrans(120)
				cc_setop(8, "Remove-Placeholder")
				cc_setop(9, "Remove-All-Placeholders")
			} else {
				cc_setobject(obj9, inv_total(inv_626, obj9))
				if (VARP[2195] = ^max_32bit_int) {
					cc_setop(1, "Withdraw-All")
				} else if (VARP[2195] > 1) {
					cc_setop(1, "Withdraw-${tostring(VARP[2195])}")
				}
				cc_setop(2, "Withdraw-1")
				cc_setop(3, "Withdraw-5")
				cc_setop(4, "Withdraw-10")
				cc_setop(5, "Withdraw-X")
				cc_setop(6, "Withdraw-All")
				if (oc_stackable(obj9) = false & oc_cert(obj9) ! obj9) {
					cc_setop(8, "Withdraw-Notes")
				}
			}
			.cc_setop(10, "Examine")
			.cc_setopbase("<col=ff9040>${oc_name(obj9)}</col>")
			.cc_settextfont(p11_full)
			.cc_settextshadow(true)
			.cc_setcolour(0xff981f)
			.cc_settextalign(^settextalign_centre, ^settextalign_top, 0)
			.cc_settext(oc_name(obj9))
			if (oc_unplaceholder(obj9) ! obj9) {
				.cc_setop(8, "Remove-Placeholder")
				.cc_setop(9, "Remove-All-Placeholders")
			} else {
				if (VARP[2195] = ^max_32bit_int) {
					.cc_setop(1, "Withdraw-All")
				} else if (VARP[2195] > 1) {
					.cc_setop(1, "Withdraw-${tostring(VARP[2195])}")
				}
				.cc_setop(2, "Withdraw-1")
				.cc_setop(3, "Withdraw-5")
				.cc_setop(4, "Withdraw-10")
				.cc_setop(5, "Withdraw-X")
				.cc_setop(6, "Withdraw-All")
				if (oc_stackable(obj9) = false & oc_cert(obj9) ! obj9) {
					.cc_setop(8, "Withdraw-Notes")
				}
			}
			if (~seed_vault_searching = 0) {
				if (~script2828(int8) ! -1) {
					int0[0] = calc(int0[0] + 1)
					cc_setop(7, "Remove-Favourite")
					.cc_setop(7, "Remove-Favourite")
				} else {
					int0[oc_param(oc_unplaceholder(obj9), param_709)] = calc(int0[oc_param(oc_unplaceholder(obj9), param_709)] + 1)
					if (~script2831 > 0) {
						cc_setop(7, "Favourite")
						.cc_setop(7, "Favourite")
					} else {
						cc_setop(7, "")
						.cc_setop(7, "")
					}
				}
			}
		} else {
			cc_sethide(true)
			.cc_sethide(true)
			cc_clearops
			.cc_clearops
		}
		int8 = calc(int8 + 1)
	}
	if (~seed_vault_searching = 0) {
		int0[0] = calc(int0[0] + 1)
	}
	val int12: Int = 0
	val int13: Int = 0
	val int14: Int = 5
	val int15: Int = 15
	val int16: Int = 20
	if (~on_mobile = true) {
		int15 = 20
		int16 = 25
	}
	val int17: Int = calc(if_getwidth(component4) / (int10 + int15))
	int1[calc(int7 + 1)]: Int
	if (~seed_vault_searching = 1) {
		cc_create(component2, ^iftype_text, 0)
		cc_setsize(5, 20, ^setsize_minus, ^setsize_abs)
		cc_setposition(0, int14, ^setpos_abs_left, ^setpos_abs_top)
		cc_setcolour(0xff981f)
		cc_settextfont(b12_full)
		cc_settextshadow(true)
		cc_settext("Search results: ${lowercase(VARCSTRING[359])}")
		cc_setposition(5, int14, ^setpos_abs_left, ^setpos_abs_top)
		int14 = calc(cc_gety + cc_getheight + 2)
		.cc_create(component3, ^iftype_graphic, 0)
		.cc_setgraphic("tradebacking_dark")
		.cc_settiling(true)
		.cc_setsize(4, 2, ^setsize_minus, ^setsize_abs)
		.cc_setposition(2, int14, ^setpos_abs_left, ^setpos_abs_top)
		int1[0] = calc(int14 + 15)
	} else {
		while (int12 <= int7) {
			int13 = enum(int, int, enum_2304, int12)
			cc_create(component2, ^iftype_text, int12)
			cc_setsize(5, 20, ^setsize_minus, ^setsize_abs)
			cc_setposition(0, int14, ^setpos_abs_left, ^setpos_abs_top)
			cc_setcolour(0xff981f)
			cc_settextfont(b12_full)
			cc_settextshadow(true)
			cc_settext(enum(int, string, enum_2305, int13))
			cc_setposition(5, int14, ^setpos_abs_left, ^setpos_abs_top)
			int14 = calc(cc_gety + cc_getheight + 2)
			.cc_create(component3, ^iftype_graphic, int12)
			.cc_setgraphic("tradebacking_dark")
			.cc_settiling(true)
			.cc_setsize(4, 2, ^setsize_minus, ^setsize_abs)
			.cc_setposition(2, int14, ^setpos_abs_left, ^setpos_abs_top)
			int1[int12] = calc(int14 + 15)
			int14 = calc(int14 + (1 + (int0[int12] - 1) / int17) * (int16 + 32 + int11))
			int12 = calc(int12 + 1)
		}
	}
	int8 = 0
	int2[calc(int7 + 1)]: Int
	val int18: Int = 0
	int14 = 0
	val index19: Int = -1
	while (int8 < 90) {
		obj9 = inv_getobj(inv_626, int8)
		if (obj9 ! null & ~seed_vault_filteritem(obj9) = 1) {
			index19 = oc_param(oc_unplaceholder(obj9), param_709)
			if (~seed_vault_searching = 1 & ~seed_vault_filteritem(obj9) = 1) {
				index19 = 0
			} else if (~script2828(int8) ! -1) {
				index19 = 0
			}
			int18 = int2[index19]
			int14 = int1[index19]
			if (cc_find(component0, int8) = ^true & .cc_find(component1, int8) = ^true) {
				cc_setposition(calc(int18 + int15 / 2 + (int10 - 36) / 2), int14, ^setpos_abs_left, ^setpos_abs_top)
				.cc_setposition(calc(int18 + int15 / 2), calc(int14 + 32), ^setpos_abs_left, ^setpos_abs_top)
				if (~seed_vault_searching = 0) {
					cc_setdragdeadtime(5)
					cc_setdragdeadzone(5)
					cc_setondrag {
						seed_vault_drag_obj(component0, component1, int8, event_mousex, event_mousey, component4, component5, VARCINT[374])
					}
					.cc_setondrag {
						seed_vault_drag_text(component0, component1, int8, event_mousex, event_mousey, component4, component5, VARCINT[374])
					}
					.cc_setdragdeadtime(5)
					.cc_setdragdeadzone(5)
					cc_setondragcomplete {
						seed_vault_drop(component0, component1, event_comsubid, event_dropsubid, cc_getx, cc_gety)
					}
					.cc_setondragcomplete {
						seed_vault_drop(component0, component1, event_comsubid, event_dropsubid, cc_getx, cc_gety)
					}
				} else {
					cc_setdragdeadtime(10000)
					cc_setdragdeadzone(10000)
					.cc_setdragdeadtime(10000)
					.cc_setdragdeadzone(10000)
					cc_setondragnull
					.cc_setondragnull
					cc_setondragcompletenull
					.cc_setondragcompletenull
				}
				int18 = calc(int18 + int15 + int10)
			}
			if (calc(int18 + int15 + int10) > if_getwidth(component0)) {
				int18 = 0
				int1[index19] = calc(int14 + int16 + 32 + int11)
			}
			int2[index19] = int18
		}
		int8 = calc(int8 + 1)
	}
	if (~seed_vault_searching = 0) {
		cc_create(component0, ^iftype_graphic, int8)
		cc_setsize(36, 32, ^setsize_abs, ^setsize_abs)
		cc_setobject_nonum(kelda_seed_5_6117, 0)
		cc_settrans(120)
		.cc_create(component1, ^iftype_text, int8)
		.cc_setsize(int10, 30, ^setsize_abs, ^setsize_abs)
		if (~script2831 > 7) {
			.cc_settext("Add Favourites")
		} else if (~script2831 > 0) {
			.cc_settext("Add/Remove Favourites")
		} else {
			.cc_settext("Remove Favourites")
		}
		.cc_settextfont(p11_full)
		.cc_settextshadow(true)
		.cc_setcolour(0xff981f)
		.cc_settextalign(^settextalign_centre, ^settextalign_top, 0)
		int18 = int2[0]
		int14 = int1[0]
		cc_setposition(calc(int18 + int15 / 2 + (int10 - 36) / 2), int14, ^setpos_abs_left, ^setpos_abs_top)
		.cc_setposition(calc(int18 + int15 / 2), calc(int14 + 32), ^setpos_abs_left, ^setpos_abs_top)
	} else {
		int7 = 0
	}
	~scrollbar_vertical_rebuild(component5, component4)
	val int20: Int = 0
	val height21: Int = calc(int1[int7] + int16 + 32 + int11)
	if (height21 > if_getheight(component4)) {
		if (VARCINT[376] > 0) {
			int20 = VARCINT[376]
		}
		if_setscrollsize(0, height21, component4)
		~scrollbar_resize(component5, component4, int20)
	} else {
		if_setscrollsize(0, 0, component4)
		~scrollbar_resize(component5, component4, 0)
	}
	return 
}
