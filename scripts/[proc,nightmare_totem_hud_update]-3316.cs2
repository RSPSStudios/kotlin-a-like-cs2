// 3316 proc
fun nightmare_totem_hud_update(component0: Component, component1: Component, int2: Int, int3: Int, component4: Component, component5: Component, int6: Int, int7: Int, component8: Component, component9: Component, int10: Int, int11: Int, component12: Component, component13: Component, int14: Int, int15: Int, int16: Int) {

	val width17: Int = if_getwidth(component1)
	val int18: Int = if_getwidth(component0)
	if (int2 ! -1 & int3 ! -1) {
		int18 = scale(int3, int2, int18)
		if (int18 = 0 & int3 > 0) {
			int18 = 1
		}
		if (int18 = if_getwidth(component0) & int3 < int2) {
			int18 = calc(int18 - 1)
		}
		if (int16 = 1) {
			if_setsize(int18, if_getheight(component1), ^setsize_abs, ^setsize_abs, component1)
			if (if_getwidth(component0) = if_getwidth(component1)) {
				if_setcolour(^white, component1)
			}
		} else {
			if_setontimer({
				nightmare_totem_hud_update_bar(component1, int18, component0)
			}, component0)
		}
	}
	val width19: Int = if_getwidth(component5)
	val int20: Int = if_getwidth(component4)
	if (int6 ! -1 & int7 ! -1) {
		int20 = scale(int7, int6, int20)
		if (int20 = 0 & int7 > 0) {
			int20 = 1
		}
		if (int20 = if_getwidth(component4) & int7 < int6) {
			int20 = calc(int20 - 1)
		}
		if (int16 = 1) {
			if_setsize(int20, if_getheight(component5), ^setsize_abs, ^setsize_abs, component5)
			if (if_getwidth(component4) = if_getwidth(component5)) {
				if_setcolour(^white, component5)
			}
		} else {
			if_setontimer({
				nightmare_totem_hud_update_bar(component5, int20, component4)
			}, component4)
		}
	}
	val width21: Int = if_getwidth(component9)
	val int22: Int = if_getwidth(component8)
	if (int10 ! -1 & int11 ! -1) {
		int22 = scale(int11, int10, int22)
		if (int22 = 0 & int11 > 0) {
			int22 = 1
		}
		if (int22 = if_getwidth(component8) & int11 < int10) {
			int22 = calc(int22 - 1)
		}
		if (int16 = 1) {
			if_setsize(int22, if_getheight(component9), ^setsize_abs, ^setsize_abs, component9)
			if (if_getwidth(component8) = if_getwidth(component9)) {
				if_setcolour(^white, component9)
			}
		} else {
			if_setontimer({
				nightmare_totem_hud_update_bar(component9, int22, component8)
			}, component8)
		}
	}
	val width23: Int = if_getwidth(component13)
	val int24: Int = if_getwidth(component12)
	if (int14 ! -1 & int15 ! -1) {
		int24 = scale(int15, int14, int24)
		if (int24 = 0 & int15 > 0) {
			int24 = 1
		}
		if (int24 = if_getwidth(component12) & int15 < int14) {
			int24 = calc(int24 - 1)
		}
		if (int16 = 1) {
			if_setsize(int24, if_getheight(component13), ^setsize_abs, ^setsize_abs, component13)
			if (if_getwidth(component12) = if_getwidth(component13)) {
				if_setcolour(^white, component13)
			}
		} else {
			if_setontimer({
				nightmare_totem_hud_update_bar(component13, int24, component12)
			}, component12)
		}
	}
	return 
}
