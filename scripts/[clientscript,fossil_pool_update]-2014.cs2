// 2014 clientscript
fun fossil_pool_update(int0: Int, int1: Int, int2: Int, int3: Int, int4: Int, int5: Int) {

	if_setsize(interpolate(0, 16384, 0, 10, int4), 0, ^setsize_2, ^setsize_minus, interface_613:26)
	if_setsize(interpolate(0, 16384, 0, 10, int4), 0, ^setsize_2, ^setsize_minus, interface_606:6)
	val int6: Int = 0
	val int7: Int = 0
	if (int4 <= 2) {
		int6, int7 = 255, interpolate(0, int4, 0, 2, 255)
	} else {
		int6, int7 = interpolate(0, calc(10 - int4), 0, 10, 255), 255
	}
	if_setcolour(~rgb_to_hex(int6, int7, 0), interface_613:26)
	if_setcolour(~rgb_to_hex(int6, int7, 0), interface_606:6)
	if_setsize(interpolate(0, 16384, 0, 10, int5), 0, ^setsize_2, ^setsize_minus, interface_613:31)
	if_setsize(interpolate(0, 16384, 0, 10, int5), 0, ^setsize_2, ^setsize_minus, interface_606:12)
	if (int5 <= 2) {
		int6, int7 = 255, interpolate(0, int5, 0, 2, 255)
	} else {
		int6, int7 = interpolate(0, calc(10 - int5), 0, 10, 255), 255
	}
	if_setcolour(~rgb_to_hex(int6, int7, 0), interface_613:31)
	if_setcolour(~rgb_to_hex(int6, int7, 0), interface_606:12)
	val int8: Int = calc(int0 + int1 + int2 + int3)
	if_setsize(interpolate(0, 16384, 0, 28, int8), 0, ^setsize_2, ^setsize_minus, interface_613:34)
	if (int8 <= 4) {
		int6, int7 = 255, interpolate(0, int8, 0, 4, 255)
	} else {
		int6, int7 = interpolate(0, calc(28 - int8), 0, 28, 255), 255
	}
	if_setcolour(~rgb_to_hex(int6, int7, 0), interface_613:34)
	if_settext("${tostring(int8)}/${tostring(28)}", interface_613:35)
	return 
}
