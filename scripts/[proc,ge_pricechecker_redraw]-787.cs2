// 787 proc
fun ge_pricechecker_redraw() {

	val width0: Int = if_getwidth(interface_464:2)
	val int1: Int = calc(width0 / 5)
	val int2: Int = calc((width0 - 5 * int1) / 4 + int1)
	val int3: Int = calc(32 + 35)
	val int4: Int = calc((int1 - 36) / 2)
	cc_deleteall(interface_464:2)
	val int5: Int = -1
	val int6: Int = 0
	val int7: Int = 0
	val obj8: Obj = null
	val size9: Int = inv_size(inv_90)
	int0[size9]: Int
	int0[0] = VARCINT[81]
	int0[1] = VARCINT[82]
	int0[2] = VARCINT[83]
	int0[3] = VARCINT[84]
	int0[4] = VARCINT[85]
	int0[5] = VARCINT[86]
	int0[6] = VARCINT[87]
	int0[7] = VARCINT[88]
	int0[8] = VARCINT[89]
	int0[9] = VARCINT[90]
	int0[10] = VARCINT[91]
	int0[11] = VARCINT[92]
	int0[12] = VARCINT[93]
	int0[13] = VARCINT[94]
	int0[14] = VARCINT[95]
	int0[15] = VARCINT[96]
	int0[16] = VARCINT[97]
	int0[17] = VARCINT[98]
	int0[18] = VARCINT[99]
	int0[19] = VARCINT[100]
	int0[20] = VARCINT[101]
	int0[21] = VARCINT[102]
	int0[22] = VARCINT[104]
	int0[23] = VARCINT[105]
	int0[24] = VARCINT[106]
	int0[25] = VARCINT[107]
	int0[26] = VARCINT[108]
	int0[27] = VARCINT[109]
	val size10: Int = 0
	while (size10 < size9) {
		cc_create(interface_464:2, ^iftype_graphic, size10)
		obj8 = inv_getobj(inv_90, size10)
		if (obj8 ! null) {
			int6, int7 = calc(size10 % 5 * int2), calc(size10 / 5 * int3)
			int5 = int7
			cc_sethide(false)
			cc_setsize(36, 32, ^setsize_abs, ^setsize_abs)
			cc_setposition(calc(int6 + int4), int7, ^setpos_abs_left, ^setpos_abs_top)
			cc_setgraphicshadow(0x333333)
			cc_setoutline(1)
			cc_setobject(obj8, inv_getnum(inv_90, size10))
			cc_setop(1, "Remove")
			cc_setop(2, "Remove-5")
			cc_setop(3, "Remove-10")
			cc_setop(4, "Remove-All")
			cc_setop(5, "Remove-X")
			cc_setop(10, "Examine")
			cc_setopbase("<col=ff9040>${oc_name(obj8)}</col>")
			cc_setonop {
				cc_settrans_temporarily(event_com, event_comsubid, 100, 0)
			}
		} else {
			cc_sethide(true)
		}
		size10 = calc(size10 + 1)
	}
	val int11: Int = 0
	val int12: Int = 0
	val string0: String = ","
	val int13: Int = size10
	size10 = 0
	while (size10 < size9) {
		obj8, int11 = inv_getobj(inv_90, size10), inv_getnum(inv_90, size10)
		if (obj8 ! null & int11 > 0) {
			int6, int7 = calc(size10 % 5 * int2), calc(size10 / 5 * int3)
			cc_create(interface_464:2, ^iftype_text, int13)
			int13 = calc(int13 + 1)
			cc_sethide(false)
			cc_setsize(int1, 35, ^setsize_abs, ^setsize_abs)
			cc_setposition(int6, calc(int7 + 32), ^setpos_abs_left, ^setpos_abs_top)
			cc_setcolour(^white)
			cc_settextfont(p11_full)
			cc_settextshadow(true)
			cc_settextalign(^settextalign_centre, ^settextalign_top, 0)
			if (calc(^max_32bit_int / int11) < int0[size10]) {
				int12 = ^max_32bit_int
			} else {
				int12 = calc(int11 * int0[size10])
			}
			if (int11 > 1) {
				if (int12 >= 0 & int12 < ^max_32bit_int) {
					cc_settext("${~tostring_spacer(int11, string0)} x ${~tostring_spacer(int0[size10], string0)}<br>=Â ${~tostring_spacer(int12, string0)}")
				} else {
					cc_settext("${~tostring_spacer(int11, string0)} x ${~tostring_spacer(int0[size10], string0)}")
				}
			} else {
				cc_settext(~tostring_spacer(int0[size10], string0))
			}
		}
		size10 = calc(size10 + 1)
	}
	val height14: Int = 0
	if (int5 >= 0) {
		height14 = calc(int5 + int3)
	}
	val int15: Int = if_getscrolly(interface_464:2)
	if (int15 > int5) {
		int15 = int5
	}
	if (height14 > if_getheight(interface_464:2)) {
		if_setscrollsize(0, height14, interface_464:2)
	} else {
		if_setscrollsize(0, 0, interface_464:2)
	}
	~scrollbar_resize(interface_464:3, interface_464:2, int15)
	return 
}
