// 2719 proc
fun 1v1arena_hud_buildplayer(int0: Int, int1: Int, string0: String, int2: Int, int3: Int, int4: Int, int5: Int, int6: Int, int7: Int): String, Int, Int, Int, Int, Int, Int {

	val component8: Component = enum(int, component, enum_1378, int0)
	if (component8 = null) {
		return string0, int2, int3, int4, int5, int6, int7
	}
	cc_deleteall(component8)
	val int9: Int = 0
	val string1: String = ""
	string1, string0 = ~script632(string0)
	if (string_length(string1) > 0) {
		if_sethide(false, component8)
		int9 = ~options_button_off(component8, 0)
		cc_create(component8, ^iftype_rectangle, int9)
		int9 = calc(int9 + 1)
		cc_setsize(6, 6, ^setsize_minus, ^setsize_minus)
		cc_setposition(0, 0, ^setpos_abs_centre, ^setpos_abs_centre)
		cc_setfill(true)
		cc_setcolour(^white)
		cc_settrans(255)
		if_setondragcomplete({
			cc_settrans_temporarily(event_com, cc_getid, 200, 255)
		}, component8)
		cc_create(component8, ^iftype_text, int9)
		int9 = calc(int9 + 1)
		cc_setsize(0, 0, ^setsize_minus, ^setsize_minus)
		cc_setposition(0, 0, ^setpos_abs_centre, ^setpos_abs_centre)
		if (int1 = 6) {
			cc_setcolour(^red)
			if_setonmouseleave({
				cc_colour_swapper(event_com, cc_getid, ^red)
			}, component8)
		} else {
			cc_setcolour(0xff981f)
			if_setonmouseleave({
				cc_colour_swapper(event_com, cc_getid, 0xff981f)
			}, component8)
		}
		if_setonmouseover({
			cc_colour_swapper(event_com, cc_getid, ^white)
		}, component8)
		if_setonop({
			opsound(event_opindex, 2)
		}, component8)
		cc_settextshadow(true)
		cc_settextfont(p11_full)
		cc_settextalign(^settextalign_centre, ^settextalign_centre, 0)
		cc_settext(string1)
		when (int1): Int {
			1 -> {
			
				~script2720(interface_618:8, int3, component8)
				int3 = calc(int3 + 1)
			}
			2 -> {
			
				~script2720(interface_618:9, int4, component8)
				int4 = calc(int4 + 1)
			}
			3 -> {
			
				~script2720(interface_618:10, int5, component8)
				int5 = calc(int5 + 1)
			}
			4 -> {
			
				~script2720(interface_618:11, int6, component8)
				int6 = calc(int6 + 1)
			}
			5 -> {
			
				~script2720(interface_618:12, int7, component8)
				int7 = calc(int7 + 1)
			}
		else -> {
		
			if_setposition(calc(if_getwidth(component8) * (int2 % 4)), calc(if_getheight(component8) * (4 - int2 / 4)), ^setpos_abs_left, ^setpos_abs_bottom, component8)
		}
		}
		int2 = calc(int2 + 1)
	} else {
		if_sethide(true, component8)
		if_setondragcomplete(null, component8)
		if_setonop(null, component8)
	}
	return string0, int2, int3, int4, int5, int6, int7
}
